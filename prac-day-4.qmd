---
title: "prac-day-four"
---

## Display the flights dataset in an alternative format to simply printing it (i.e. running flights).

```{r}
#| echo: false
library(nycflights13)
library(dplyr)
library(tibble)
print(flights)
```

## Rewrite this code using dplyr and the pipe:

```{r}
dist_tbl <- flights |>
  filter(month == 1) |>
  group_by(carrier) |>
  summarise(
    mean_distance = mean(distance),
    sd_distance = sd(distance),
    .groups = "drop"
  ) |>
  arrange(mean_distance)
dist_tbl
```

## Explain why the standard deviation is NA for one carrier, and why it is 0 for others. Demonstrate your answer using code.

1) For carrier 'OO' there is only one value hence sd is NA.
```{r}
#| echo: false
flights |> filter(month == 1, carrier == 'OO') |> select(carrier, distance) 
```

2) For carrier 'F9' and other carriers with sd 0 have the same distance values hence sd is 0.

```{r}
#| echo: false
flights |> filter(month ==1, carrier == 'F9') |> select(carrier, distance) 
```

## Using tidyr and dplyr where appropriate, construct a dataframe where the carriers are along the columns, and the rows are the average departure delay (dep_delay) flown by each carrier (carrier) in each month.

```{r}
#| echo: false
library(tidyr)
flights |> group_by(month, carrier) |> summarise(avg_dep_delay = mean(dep_delay), .groups = 'drop') |> pivot_wider(names_from = carrier, values_from = avg_dep_delay)
```

## Calculate the proportion of flights that were delayed (dep_delay greater than 0) but arrived on or before time (arr_delay less than or equal to 0).

```{r}
#| echo: false
proportion <- flights |> filter(dep_delay > 0 & arr_delay <= 0) |> count() |> pull(n)/nrow(flights)
print(proportion)
```

## Using the airlines and flights datasets, do the following, showing the output from each step:

Identify routes that more than one airline flies
```{r}
#| echo: false
routes_multiple_airlines <- flights |>
  inner_join(airlines, by = "carrier") |>
  group_by(origin, dest) |>
  summarise(airlines_count = n_distinct(name), .groups = 'drop') |>
  filter(airlines_count > 1)
print(routes_multiple_airlines)
```

For each such route, calculate the average arrival delay for each airline (exclude NAs). Find the names of these airlines.
```{r}
#| echo: false
avg_delay_per_airline <- flights |>
  inner_join(airlines, by = "carrier") |>
  filter(paste(origin, dest) %in% paste(routes_multiple_airlines$origin, routes_multiple_airlines$dest)) |>
  group_by(origin, dest, carrier) |>
  summarise(
    avg_arr_delay = mean(arr_delay, na.rm = TRUE),
    .groups = 'drop'
  )
print(avg_delay_per_airline)
```

For each such route, identify the airline with the worst and best average arrival delay.
```{r}
#| echo: false
best_worst_delay <- avg_delay_per_airline |>
  group_by(origin, dest) |>
  summarise(
    best_airline = carrier[which.min(avg_arr_delay)],  # Airline with the best (min) average delay
    best_delay = min(avg_arr_delay),
    worst_airline = carrier[which.max(avg_arr_delay)], # Airline with the worst (max) average delay
    worst_delay = max(avg_arr_delay),
    delay_difference = max(avg_arr_delay) - min(avg_arr_delay),
    .groups = 'drop'
  )
print(best_worst_delay)
```

Identify the route with the greatest difference between the best and worst performing airlines
```{r}
#| echo: false
max_diff_route <- best_worst_delay |>
  filter(delay_difference == max(delay_difference)) 
print(max_diff_route)
```

