---
title: "prac2"
---

## 1. Generate Simulated Data:

- Set seed to 1
- Create x as a sequence of numbers of 1 to 100
- Generate y as noisy sine wave

```{r}
#| echo: false
set.seed(1)
x <- 1:100
y <- sin(x / 10) + rnorm(100, sd = 0.2)
```

## 2. Implement the LOWESS Algorithm

- Define a function customLowess(x, y, f) that returns the smoothed values

```{r}
customLowess <- function(x, y, f) {
  n <- length(x)
  smoothed_y <- numeric(n)
  for (i in 1:n) {
    # Compute distances between the current point and all others
    distances <- abs(x - x[i]) 
    distances <- abs(x - x[i])  
    # Apply tricube weight function
    weights <- (1 - (distances / (max(distances) * f))^3)^3  
    
    # Zero out any negative weights
    weights[weights < 0] <- 0
    
    # Apply wighted least squares regression
    fit <- lm(y ~ x, weights = weights)
    
    # Get predicted value for the current point
    smoothed_y[i] <- predict(fit, newdata = data.frame(x = x[i]))
  }
  
  return(smoothed_y)  # Return smoothed values
}
```

## 3. Compare with R's Built-in lowess()
- Use the built-in lowess() function with the same f value. You will also need to set the iter argument to 0
- Plot both curves to compare their smoothing values

```{r}
# Apply custom LOWESS smoothing
f <- 0.1  # Smoothing parameter
smoothed_y_custom <- customLowess(x, y, f)

# Apply built-in lowess() smoothing (iter = 0)
smoothed_y_builtin <- lowess(x, y, f = f, iter = 0)$y

# Visualisation: customLowess와 lowess 비교
plot(x, y, main = "LOWESS Smoothing Comparison", col = "blue", xlab = "X", ylab = "Y")
lines(x, smoothed_y_custom, col = "red")  # Smoothed by customLowess
lines(x, smoothed_y_builtin, col = "green")  # Smoothed by lowess()
```

Both methods produce similar smoothed results